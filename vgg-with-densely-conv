# this network is used for testing FCN network
import torch
import torch.nn as nn


class VGG13(nn.Module):
    '''
    change the original vgg13 to FCN net work
    '''
    def __init__(self):
        super(VGG13, self).__init__()
        self.features = nn.Sequential(nn.Conv2d(3, 64, 3, stride=1, padding=1), nn.ReLU(inplace=True),\
                                      nn.Conv2d(64, 64, 3, stride=1, padding=1), nn.ReLU(inplace=True), nn.MaxPool2d(2, 2), \
                                      nn.Conv2d(64, 128, 3, stride=1, padding=1), nn.ReLU(inplace=True),\
                                      nn.Conv2d(128, 128, 3, stride=1, padding=1), nn.ReLU(inplace=True), nn.MaxPool2d(2, 2), \
                                      nn.Conv2d(128, 256, 3, stride=1, padding=1), nn.ReLU(inplace=True), \
                                      nn.Conv2d(256, 256, 3, stride=1, padding=1), nn.ReLU(inplace=True), nn.MaxPool2d(2, 2), \
                                      nn.Conv2d(256, 512, 3, stride=1, padding=1), nn.ReLU(inplace=True), \
                                      nn.Conv2d(512, 512, 3, stride=1, padding=1), nn.ReLU(inplace=True), nn.MaxPool2d(2, 2),\
                                      nn.Conv2d(512, 512, 3, stride=1, padding=1), nn.ReLU(inplace=True),\
                                      nn.Conv2d(512, 512, 3, stride=1, padding=1), nn.ReLU(inplace=True),nn.MaxPool2d(2, 2))

        self.classifier = nn.Sequential(nn.Conv2d(512, 4096, 7), nn.ReLU(inplace=True),\
                                        nn.Conv2d(4096, 4096, 1), nn.ReLU(inplace=True), \
                                        nn.Conv2d(4096, 1000, 1), nn.ReLU(inplace=True))

    def forward(self, x):
        x = self.features(x)
        out = self.classifier(x)
        return out


if __name__ == '__main__':
    model = VGG13()   
    input = torch.randn((1, 3, 448, 448))  # random create a input. size should follow (batch_size, channes, height, width)
    y = model(input)
    print(y.size())
